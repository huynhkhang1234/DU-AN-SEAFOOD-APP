/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.system.main.UI;

import com.system.event.EventMenu;
import com.system.event.EventMenuSelected;
import com.system.model.UI.ModelMenu;
import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Area;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import javax.swing.border.EmptyBorder;
import net.miginfocom.swing.MigLayout;

/**
 *
 * @author HP
 */
public class MenuItem extends javax.swing.JPanel {

    private float alpha;
    private ModelMenu menu;
    private boolean open;
    private EventMenuSelected eventSelected;
    private int index;

    public void setAlpha(float alpha) {
        this.alpha = alpha;
    }

    public ModelMenu getMenu() {
        return menu;
    }

    public boolean isOpen() {
        return open;
    }

    public void setOpen(boolean open) {
        this.open = open;
    }

    public EventMenuSelected getEventSelected() {
        return eventSelected;
    }

    public void setEventSelected(EventMenuSelected eventSelected) {
        this.eventSelected = eventSelected;
    }

    public int getIndex() {
        return index;
    }

    public MenuItem(ModelMenu menu, EventMenu event, EventMenuSelected eventSelected, int index) {
        initComponents();
        this.menu = menu;
        this.eventSelected = eventSelected;
        this.index = index;
        setOpaque(false);
        setBackground(new Color(143, 143, 173)); // set màu cho hiệu ứng chạy qua
        setBorder(new EmptyBorder(9, 15, 8, 15));
        setForeground(Color.white);
        setLayout(new MigLayout("wrap, fillx, insets 0.0", "[fill]", "[fill, 40!]0[fill, 35!]"));
        //MenuButtonCilck firstItem = new MenuButtonCilck(menu.getIcon(), "       " + menu.getMenuName());
//        firstItem.addActionListener(new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent e) {
////                if (menu.getSubMenu().length > 0) {
////                    if (event.menuPressed(MenuItem.this, !open)) {
////                        open = !open;
////                    }
////                }
//                eventSelected.menuSelected(index, -1);
//            }
//        });
        //add(firstItem);

//            int subMenuIndex = -1;
//            for (String st : menu.getSubMenu()) {
//                MenuButtonCilck item = new MenuButtonCilck(st);
//                item.setIndex(++subMenuIndex);
//                item.addActionListener(new ActionListener() {
//                    @Override
//                    public void actionPerformed(ActionEvent e) {
//                        eventSelected.menuSelected(index, item.getIndex());
//                    }
//                });
//                add(item);
//            }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    protected void paintComponent(Graphics g) {
        Graphics2D g2 = (Graphics2D) g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        int width = getWidth();
        int height = getPreferredSize().height;
        g2.setColor(new Color(150, 50, 50)); // Chỉnh màu cho danh mục khi click vào
        // Câu lệnh này giúp cho việc click vào thì mới tô đen cái phần mik chọn
        g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, alpha));
        g2.fillRect(0, 2, width, 38);
        g2.setComposite(AlphaComposite.SrcOver);
        // Câu lệnh này giúp làm tô đen những cái nút còn lại luôn
        g2.fillRect(0, 40, width, height - 40);
        g2.setColor(new Color(100, 100, 100));
        g2.drawLine(30, 40, 30, height - 17);
//        if (menu.getSubMenu() != null) {
//            for (int i = 0; i < menu.getSubMenu().length; i++) {
//                int y = ((i + 1) * 35 + 40) - 17;
//                g2.drawLine(30, y, 38, y);
//            }
//            if (menu.getSubMenu().length > 0) {
//                createArrowButton(g2);
//            }
//        }
        createArrowButton(g2);
        super.paintComponent(g);
    }

    private void createArrowButton(Graphics2D g2) {
        int size = 4;
        int y = 19;
        int x = 205;
        g2.setColor(new Color(230, 230, 230));
        float ay = alpha * size;
        float ayl = (1f - alpha) * size;
        g2.drawLine(x, (int) (y + ay), x + 4, (int) (y + ayl));
        g2.drawLine(x + 4, (int) (y + ayl), x + 8, (int) (y + ay));
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
